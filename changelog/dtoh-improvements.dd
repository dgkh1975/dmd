Improvements for the C++ header generation

The following features/bugfixes/improvements were implemented for the
experimental C++ header generator:

- Declarations from template mixins are emitted into the instantation context
- (Superclass) methods aliases are emitted as `using ...` instead of `typedef ...`
- `extern(D)` symbols are no longer emitted by accident in certain situations
- `extern(D)` structs and classes are emitted if referenced by an exported symbol
- Symbols referenced from template declarations are emitted before their first use
- Forward declarations consistently include `template<...>`
- `extern(C++, class)`, `extern(C++, struct)` affects forward declarations
- Types used in reference parameters are forward declared if possible
- Renamed or local imports are emitted as `using ...` when possible
- Complex types are emitted as `_Complex`.
- Declarations are emitted before the first member access
- Global variables with invalid names in C++ are omitted
- Initializers of `union` variables/parameters omit non-active members
- Typecasts are emitted as C style, not D's `cast(...) ...`
- Structs are always tagged as `final` because D disallows `struct` inheritance
- No longer asserts for declarations using `noreturn`
- Symbol names always include template parameters and enclosing declarations
  when required
- Properly emits (static / enum) members of templated aggregates
- Properly emits static arrays in template declarations
- No longer omits the parent aggregate when referencing `__gshared` variables
- No longer uses D syntax for expressions nested in unary / binary expressions
- Does not emit `public:`, ... inside of anonymous structs/unions

Note: The header generator is still considerer experimental, so please submit
      any bugs encountered to [the bug tracker](https://issues.dlang.org).
